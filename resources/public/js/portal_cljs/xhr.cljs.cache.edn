{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name portal-cljs.xhr, :imports nil, :requires {goog.net.XhrIo goog.net.XhrIo}, :uses nil, :defs {send-xhr {:protocol-inline nil, :meta {:file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :line 4, :column 7, :end-line 4, :end-column 15, :arglists (quote ([url callback method & [data headers timeout]])), :doc "Send a xhr to url using callback and HTTP method.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(url callback method [data headers timeout])], :arglists ([url callback method & [data headers timeout]]), :arglists-meta (nil)}}, :name portal-cljs.xhr/send-xhr, :variadic true, :file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(url callback method [data headers timeout])], :arglists ([url callback method & [data headers timeout]]), :arglists-meta (nil)}, :method-params [(url callback method [data headers timeout])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 3, :fn-var true, :arglists ([url callback method & [data headers timeout]]), :doc "Send a xhr to url using callback and HTTP method."}, xhrio-wrapper {:protocol-inline nil, :meta {:file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :line 9, :column 7, :end-line 9, :end-column 20, :arglists (quote ([f response])), :doc "A callback for processing the xhrio response event. If\n  response.target.isSuccess() is true, call f on the json response"}, :name portal-cljs.xhr/xhrio-wrapper, :variadic false, :file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :end-column 20, :method-params ([f response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f response])), :doc "A callback for processing the xhrio response event. If\n  response.target.isSuccess() is true, call f on the json response"}, retrieve-url {:protocol-inline nil, :meta {:file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :line 19, :column 7, :end-line 19, :end-column 19, :arglists (quote ([url method data f & [timeout]])), :doc "Retrieve and process json response with f from url using HTTP method and json\n  data. Optionally, define a timeout in ms.", :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(url method data f [timeout])], :arglists ([url method data f & [timeout]]), :arglists-meta (nil)}}, :name portal-cljs.xhr/retrieve-url, :variadic true, :file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 4, :method-params [(url method data f [timeout])], :arglists ([url method data f & [timeout]]), :arglists-meta (nil)}, :method-params [(url method data f [timeout])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists ([url method data f & [timeout]]), :doc "Retrieve and process json response with f from url using HTTP method and json\n  data. Optionally, define a timeout in ms."}, process-json {:protocol-inline nil, :meta {:file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([f response])), :doc "Take a response, convert it a clj map and call f on the resulting map."}, :name portal-cljs.xhr/process-json, :variadic false, :file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :end-column 19, :method-params ([f response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f response])), :doc "Take a response, convert it a clj map and call f on the resulting map."}, process-json-response {:protocol-inline nil, :meta {:file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :line 31, :column 7, :end-line 31, :end-column 28, :arglists (quote ([f])), :doc "Assuming the server will respond with JSON, convert the response to JSON\n  and call f on it."}, :name portal-cljs.xhr/process-json-response, :variadic false, :file "/Users/james/Purple-Services/portal-cljs/src/portal_cljs/xhr.cljs", :end-column 28, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Assuming the server will respond with JSON, convert the response to JSON\n  and call f on it."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:keywordize-keys}, :order [:keywordize-keys]}, :doc nil}